"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/callback/page",{

/***/ "(app-pages-browser)/./store/useStore.ts":
/*!***************************!*\
  !*** ./store/useStore.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTaskStore: function() { return /* binding */ useTaskStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\n// デフォルトラベル\nconst getDefaultLabels = ()=>[\n        {\n            id: \"1\",\n            name: \"本業\",\n            color: \"#2563eb\",\n            createdAt: new Date()\n        },\n        {\n            id: \"2\",\n            name: \"副業\",\n            color: \"#059669\",\n            createdAt: new Date()\n        },\n        {\n            id: \"3\",\n            name: \"プライベート\",\n            color: \"#dc2626\",\n            createdAt: new Date()\n        }\n    ];\nconst useTaskStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        // Initial state\n        tasks: [],\n        labels: getDefaultLabels(),\n        currentView: \"todo\",\n        selectedLabel: null,\n        filters: {},\n        sortBy: \"dueDate\",\n        sortOrder: \"asc\",\n        // Google Calendar State\n        googleAuthToken: null,\n        googleRefreshToken: null,\n        googleTokenExpiry: null,\n        googleCalendars: [],\n        googleEvents: [],\n        // Debug State\n        debugHistory: [],\n        maxDebugHistory: 100,\n        // Actions\n        setTasks: (tasks)=>set({\n                tasks\n            }),\n        addTask: (task)=>set((state)=>({\n                    tasks: [\n                        ...state.tasks,\n                        task\n                    ]\n                })),\n        updateTask: (task)=>set((state)=>({\n                    tasks: state.tasks.map((t)=>t.id === task.id ? task : t)\n                })),\n        deleteTask: (taskId)=>set((state)=>({\n                    tasks: state.tasks.filter((t)=>t.id !== taskId)\n                })),\n        setLabels: (labels)=>set({\n                labels\n            }),\n        addLabel: (label)=>set((state)=>({\n                    labels: [\n                        ...state.labels,\n                        label\n                    ]\n                })),\n        updateLabel: (label)=>set((state)=>({\n                    labels: state.labels.map((l)=>l.id === label.id ? label : l)\n                })),\n        deleteLabel: (labelId)=>set((state)=>({\n                    labels: state.labels.filter((l)=>l.id !== labelId),\n                    tasks: state.tasks.map((task)=>task.label === labelId ? {\n                            ...task,\n                            label: \"\"\n                        } : task)\n                })),\n        setCurrentView: (currentView)=>set({\n                currentView\n            }),\n        setSelectedLabel: (selectedLabel)=>set({\n                selectedLabel\n            }),\n        setFilters: (filters)=>set({\n                filters\n            }),\n        setSortBy: (sortBy)=>set({\n                sortBy\n            }),\n        setSortOrder: (sortOrder)=>set({\n                sortOrder\n            }),\n        // Google Calendar Actions\n        setGoogleAuthToken: (token)=>set({\n                googleAuthToken: token\n            }),\n        setGoogleCalendars: (calendars)=>set({\n                googleCalendars: calendars\n            }),\n        setGoogleEvents: (events)=>set({\n                googleEvents: events\n            }),\n        toggleGoogleCalendar: (calendarId)=>set((state)=>({\n                    googleCalendars: state.googleCalendars.map((calendar)=>calendar.id === calendarId ? {\n                            ...calendar,\n                            isSelected: !calendar.isSelected\n                        } : calendar)\n                })),\n        // Debug Actions\n        addDebugInfo: (info)=>set((state)=>{\n                const newDebugInfo = {\n                    ...info,\n                    id: Date.now().toString(),\n                    timestamp: new Date()\n                };\n                const updatedHistory = [\n                    ...state.debugHistory,\n                    newDebugInfo\n                ];\n                // 最大履歴数を超えた場合は古いものから削除\n                if (updatedHistory.length > state.maxDebugHistory) {\n                    updatedHistory.splice(0, updatedHistory.length - state.maxDebugHistory);\n                }\n                return {\n                    debugHistory: updatedHistory\n                };\n            }),\n        clearDebugHistory: ()=>set({\n                debugHistory: []\n            }),\n        setMaxDebugHistory: (max)=>set({\n                maxDebugHistory: max\n            }),\n        // Computed\n        getFilteredTasks: ()=>{\n            const { tasks, filters, selectedLabel } = get();\n            let filtered = tasks;\n            // 完了タスクを除外（完了ページで管理するため）\n            filtered = filtered.filter((task)=>task.status !== \"completed\");\n            // Label filter\n            if (selectedLabel) {\n                filtered = filtered.filter((task)=>task.label === selectedLabel);\n            }\n            // Status filter\n            if (filters.status) {\n                filtered = filtered.filter((task)=>task.status === filters.status);\n            }\n            // Priority filter\n            if (filters.priority) {\n                filtered = filtered.filter((task)=>task.priority === filters.priority);\n            }\n            // Search filter\n            if (filters.search) {\n                filtered = filtered.filter((task)=>task.title.toLowerCase().includes(filters.search.toLowerCase()) || task.description.toLowerCase().includes(filters.search.toLowerCase()));\n            }\n            return filtered;\n        },\n        // 完了タスクを取得\n        getCompletedTasks: ()=>{\n            const { tasks } = get();\n            return tasks.filter((task)=>task.status === \"completed\" && task.completedAt && (task.completedAt instanceof Date || typeof task.completedAt === \"string\"));\n        },\n        // 完了タスクを日付別にグループ化\n        getCompletedTasksByDate: ()=>{\n            const completedTasks = get().getCompletedTasks();\n            const grouped = {};\n            completedTasks.forEach((task)=>{\n                // completedAtが文字列の場合はDateオブジェクトに変換\n                const completedAt = task.completedAt instanceof Date ? task.completedAt : new Date(task.completedAt);\n                const dateKey = completedAt.toISOString().split(\"T\")[0]; // YYYY-MM-DD形式\n                if (!grouped[dateKey]) {\n                    grouped[dateKey] = [];\n                }\n                grouped[dateKey].push(task);\n            });\n            // 日付順にソート（新しい日付が上）\n            return Object.entries(grouped).sort((param, param1)=>{\n                let [a] = param, [b] = param1;\n                return b.localeCompare(a);\n            }).reduce((acc, param)=>{\n                let [date, tasks] = param;\n                acc[date] = tasks.sort((a, b)=>{\n                    const aDate = a.completedAt instanceof Date ? a.completedAt : new Date(a.completedAt);\n                    const bDate = b.completedAt instanceof Date ? b.completedAt : new Date(b.completedAt);\n                    return bDate.getTime() - aDate.getTime();\n                });\n                return acc;\n            }, {});\n        },\n        getLabelById: (id)=>{\n            const { labels } = get();\n            return labels.find((label)=>label.id === id);\n        }\n    }), {\n    name: \"task-management-storage\",\n    partialize: (state)=>({\n            tasks: state.tasks,\n            labels: state.labels,\n            currentView: state.currentView,\n            filters: state.filters,\n            sortBy: state.sortBy,\n            sortOrder: state.sortOrder,\n            googleAuthToken: state.googleAuthToken,\n            googleCalendars: state.googleCalendars,\n            googleEvents: state.googleEvents,\n            debugHistory: state.debugHistory,\n            maxDebugHistory: state.maxDebugHistory\n        }),\n    onRehydrateStorage: ()=>(state)=>{\n            if (state) {\n                // タスクのみを正しく復元（Googleカレンダーイベントは除外）\n                if (state.tasks && Array.isArray(state.tasks)) {\n                    state.tasks = state.tasks.filter((task)=>task && task.id && task.title && task.status && task.priority !== undefined && task.progress !== undefined && task.startDate && task.dueDate && task.createdAt && task.updatedAt).map((task)=>({\n                            ...task,\n                            startDate: new Date(task.startDate),\n                            dueDate: new Date(task.dueDate),\n                            createdAt: new Date(task.createdAt),\n                            updatedAt: new Date(task.updatedAt),\n                            completedAt: task.completedAt ? task.completedAt instanceof Date ? task.completedAt : new Date(task.completedAt) : undefined\n                        }));\n                }\n                // ラベルを正しく復元\n                if (state.labels && Array.isArray(state.labels)) {\n                    state.labels = state.labels.map((label)=>({\n                            ...label,\n                            createdAt: new Date(label.createdAt)\n                        }));\n                }\n                // ラベルが空の場合はデフォルトラベルを設定\n                if (!state.labels || state.labels.length === 0) {\n                    state.labels = getDefaultLabels();\n                }\n                // Googleカレンダー関連のデータを初期化（存在しない場合）\n                if (!state.googleAuthToken) state.googleAuthToken = null;\n                if (!state.googleCalendars) state.googleCalendars = [];\n                if (!state.googleEvents) state.googleEvents = [];\n                if (!state.debugHistory) state.debugHistory = [];\n                if (!state.maxDebugHistory) state.maxDebugHistory = 100;\n                // デバッグ履歴のtimestampを正しく復元\n                if (state.debugHistory && Array.isArray(state.debugHistory)) {\n                    state.debugHistory = state.debugHistory.map((debugInfo)=>({\n                            ...debugInfo,\n                            timestamp: new Date(debugInfo.timestamp)\n                        }));\n                }\n            }\n        }\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/useStore.ts\n"));

/***/ })

});